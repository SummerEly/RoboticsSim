/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ely_867287
 */

public class MainWindow extends javax.swing.JFrame 
{
    private TreeMap<Integer, Team> teams;
    private TreeSet<Match> matches;
    private TreeMap<Integer, Double> oprs;
    private TreeSet<Team> rankedTeams;
    private File currentFile;
    private ArrayList<SimModel> simulations;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() 
    {
        teams = new TreeMap<>();
        matches = new TreeSet<>();
        oprs = new TreeMap<>();
        rankedTeams = new TreeSet<>();
        simulations = new ArrayList<>();
        
        initComponents();
        
        // Autosize the column widths
        table_Matches.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table_Teams.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        table_Simulator.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
      
        try 
        {
            loadOPR(new Scanner(new File("TeamOPR.txt")));
            loadFullData(new Scanner(new File("1819AML_results_m3.csv")));
            loadMatches(new Scanner(new File("MatchList.txt")));
        }
        
        catch(FileNotFoundException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR: File not found.", "File Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("ERROR: File not found.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSpinner3 = new javax.swing.JSpinner();
        tabbedPane = new javax.swing.JTabbedPane();
        panel_Teams = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_Teams = new DisplayTable();
        panel_Matches = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_Matches = new DisplayTable();
        button_generateMatches = new javax.swing.JButton();
        panel_Simulator = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_Simulator = new DisplayTable();
        spinnerNumSims = new javax.swing.JSpinner();
        spinnerMatchNum = new javax.swing.JSpinner();
        jTextField3 = new javax.swing.JTextField();
        view_SimButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menu_import = new javax.swing.JMenu();
        menuItem_teamList = new javax.swing.JMenuItem();
        menuItem_teamData = new javax.swing.JMenuItem();
        menuItem_fullData = new javax.swing.JMenuItem();
        menuItem_importMatchesFromFile = new javax.swing.JMenuItem();
        menuItem_importOPRFromFile = new javax.swing.JMenuItem();
        menuItem_save = new javax.swing.JMenuItem();
        menuItem_saveAs = new javax.swing.JMenuItem();
        menuItem_open = new javax.swing.JMenuItem();

        jTextField2.setText(" View Match Number");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_Teams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team Number", "Team Name", "OPR", "Average Score from Historical Matches", "Historical Match Scores"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table_Teams);

        javax.swing.GroupLayout panel_TeamsLayout = new javax.swing.GroupLayout(panel_Teams);
        panel_Teams.setLayout(panel_TeamsLayout);
        panel_TeamsLayout.setHorizontalGroup(
            panel_TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE)
        );
        panel_TeamsLayout.setVerticalGroup(
            panel_TeamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Teams", panel_Teams);

        table_Matches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Red Score", "Red Alliance", "Blue Score", "Blue Alliance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_Matches);

        button_generateMatches.setText("Generate Matches from MatchMaker");
        button_generateMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_generateMatchesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_MatchesLayout = new javax.swing.GroupLayout(panel_Matches);
        panel_Matches.setLayout(panel_MatchesLayout);
        panel_MatchesLayout.setHorizontalGroup(
            panel_MatchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MatchesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148)
                .addComponent(button_generateMatches)
                .addGap(0, 101, Short.MAX_VALUE))
        );
        panel_MatchesLayout.setVerticalGroup(
            panel_MatchesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
            .addGroup(panel_MatchesLayout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(button_generateMatches)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Matches", panel_Matches);

        jButton1.setText("Run Simulator");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        table_Simulator.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank ", "Team Number", "OPR", "TBP", "RP", "Standard Deviation of Simulated Matches"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(table_Simulator);

        jTextField3.setText(" Number of Simulations");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        view_SimButton.setText("View Simulation Number");
        view_SimButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_SimButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_SimulatorLayout = new javax.swing.GroupLayout(panel_Simulator);
        panel_Simulator.setLayout(panel_SimulatorLayout);
        panel_SimulatorLayout.setHorizontalGroup(
            panel_SimulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_SimulatorLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 884, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panel_SimulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_SimulatorLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(panel_SimulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_SimulatorLayout.createSequentialGroup()
                                .addComponent(view_SimButton)
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_SimulatorLayout.createSequentialGroup()
                                .addComponent(spinnerMatchNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(81, 81, 81))))
                    .addGroup(panel_SimulatorLayout.createSequentialGroup()
                        .addGroup(panel_SimulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_SimulatorLayout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(spinnerNumSims, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(panel_SimulatorLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jTextField3)))
                        .addContainerGap())
                    .addGroup(panel_SimulatorLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panel_SimulatorLayout.setVerticalGroup(
            panel_SimulatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_SimulatorLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(panel_SimulatorLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerNumSims, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(view_SimButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerMatchNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Simulator", panel_Simulator);

        menu_import.setText("File");

        menuItem_teamList.setText("Import Team List");
        menu_import.add(menuItem_teamList);

        menuItem_teamData.setText("Import Team Data");
        menu_import.add(menuItem_teamData);

        menuItem_fullData.setText("Import Full Team Data");
        menuItem_fullData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_fullDataActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_fullData);

        menuItem_importMatchesFromFile.setText("Import Matches From File");
        menuItem_importMatchesFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_importMatchesFromFileActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_importMatchesFromFile);

        menuItem_importOPRFromFile.setText("Import OPR from File");
        menuItem_importOPRFromFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_importOPRFromFileActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_importOPRFromFile);

        menuItem_save.setText("Save");
        menuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_save);

        menuItem_saveAs.setText("Save As");
        menuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveAsActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_saveAs);

        menuItem_open.setText("Open");
        menuItem_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_openActionPerformed(evt);
            }
        });
        menu_import.add(menuItem_open);

        menuBar.add(menu_import);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItem_fullDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_fullDataActionPerformed
        try
        {
            File file;
            JFileChooser jfc = new JFileChooser();
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            {
                file = jfc.getSelectedFile();
            }
            else
            {
                return;
            }
            
            Scanner data = new Scanner(file);
            loadFullData(data);
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("ERROR: File not found.");
            JOptionPane.showMessageDialog(this, "ERROR: File not found. File name:" +  ex.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }
        System.out.println("Data Import Complete");
    }//GEN-LAST:event_menuItem_fullDataActionPerformed

    private void menuItem_importMatchesFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_importMatchesFromFileActionPerformed
        try
        {
            File file;
            JFileChooser jfc = new JFileChooser();
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            {
                file = jfc.getSelectedFile();
            }
            else
            {
                return;
            }
            Scanner data = new Scanner(file);
            loadMatches(data);
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("ERROR: File not found.");
            JOptionPane.showMessageDialog(this, "ERROR: File not found. File name:"+  ex.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_menuItem_importMatchesFromFileActionPerformed

    private void menuItem_importOPRFromFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItem_importOPRFromFileActionPerformed
    {//GEN-HEADEREND:event_menuItem_importOPRFromFileActionPerformed
        // Reads OPR pairings from a file. The first item read is the team 
        // number, the second item read is the team OPR. This will be used
        // to place the values into a TreeMap<Integer, Double> oprs.
        // key = teamNumber
        // value = opr
        
         try
        {
            File file;
            JFileChooser jfc = new JFileChooser();
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            {
                file = jfc.getSelectedFile();
            }
            else
            {
                return;
            }
            
            Scanner data = new Scanner(file);
            loadOPR(data);
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("ERROR: File not found.");
            JOptionPane.showMessageDialog(this, "ERROR: File not found. File Name: " +  ex.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
        }       
        
        System.out.println("Data Import Complete");
        
    }//GEN-LAST:event_menuItem_importOPRFromFileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        simulations = new ArrayList<>();
        TreeSet<Match> allMatches = new TreeSet<>();
           
        int matchNum = 0;
        for (int i = 0; i < (int)spinnerNumSims.getValue(); i++)
        {
            button_generateMatchesActionPerformed(evt);
            scoreMatches();
            SimModel s = new SimModel(matches, rankedTeams);
            for(Match m : matches)  
            {
                Match newMatch = new Match("Qualification: " + matchNum, m.getRed1(),
                    m.getRed2(), m.getBlue1(), m.getBlue2(), m.getSurrogates());
                allMatches.add(newMatch);
                matchNum++;
            }
            simulations.add(s);
        }
        
        TreeSet<Match> placeholder = matches;
        matches = allMatches;
        
        scoreMatches();
        
        matches = placeholder; 
        
        displayMatchesInTable();
        displayResultsInTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void button_generateMatchesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button_generateMatchesActionPerformed
    {//GEN-HEADEREND:event_button_generateMatchesActionPerformed
        // Generates matches by calling the MatchMaker.exe program from Idol Loop Software
        // Code will capture the output, then place data in the Matches set
        // and update the table_matches
        try
        {
            Scanner data;
            String command = "MatchMaker -g -a 2 -l teams.txt -u 3 -t 49 -r 5 -s";
            Process p = Runtime.getRuntime().exec(command);
            data = new Scanner(p.getInputStream());
            matches = readMatches(data);
            displayMatchesInTable();
        }
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(this, "ERROR: File not found. File name"
                    + ":" +  ex.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_button_generateMatchesActionPerformed

    private void menuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItem_saveAsActionPerformed
    {//GEN-HEADEREND:event_menuItem_saveAsActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        
        if(jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File file = jfc.getSelectedFile();
            writeModelToFile(file);
        } 
    }//GEN-LAST:event_menuItem_saveAsActionPerformed

    private void menuItem_openActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItem_openActionPerformed
    {//GEN-HEADEREND:event_menuItem_openActionPerformed
        try 
        {
            JFileChooser jfc = new JFileChooser();
            
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            
            if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            {
                File file = jfc.getSelectedFile();
                FileInputStream fis = new FileInputStream(file);
                ObjectInputStream ois = new ObjectInputStream(fis);
                SimModel model = (SimModel) ois.readObject();
                simulations = (ArrayList<SimModel>)ois.readObject();
                // Reads the data from the model and replaces data in the program
                teams = model.getTeams();
                matches = model.getMatches();
                oprs = model.getOprs();
                rankedTeams = model.getRankedTeams();

                updateTeamStatsTable();
                displayMatchesInTable();
                displayResultsInTable();
                
                currentFile = file;
            
                ois.close();
            } 
        } catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch(IOException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItem_openActionPerformed

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuItem_saveActionPerformed
    {//GEN-HEADEREND:event_menuItem_saveActionPerformed
        if (currentFile == null)
        {
            menuItem_saveAsActionPerformed(evt);
        }
        else
        {
            writeModelToFile(currentFile);
        }
    }//GEN-LAST:event_menuItem_saveActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField2ActionPerformed
    {//GEN-HEADEREND:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField3ActionPerformed
    {//GEN-HEADEREND:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void view_SimButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_SimButtonActionPerformed
        int simNum = (int)spinnerMatchNum.getValue();
        if (simNum < 0 || simNum >= simulations.size()){
            return;
        }
        matches = simulations.get(simNum).getMatches();
        displayMatchesInTable();
    }//GEN-LAST:event_view_SimButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_generateMatches;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItem_fullData;
    private javax.swing.JMenuItem menuItem_importMatchesFromFile;
    private javax.swing.JMenuItem menuItem_importOPRFromFile;
    private javax.swing.JMenuItem menuItem_open;
    private javax.swing.JMenuItem menuItem_save;
    private javax.swing.JMenuItem menuItem_saveAs;
    private javax.swing.JMenuItem menuItem_teamData;
    private javax.swing.JMenuItem menuItem_teamList;
    private javax.swing.JMenu menu_import;
    private javax.swing.JPanel panel_Matches;
    private javax.swing.JPanel panel_Simulator;
    private javax.swing.JPanel panel_Teams;
    private javax.swing.JSpinner spinnerMatchNum;
    private javax.swing.JSpinner spinnerNumSims;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table_Matches;
    private javax.swing.JTable table_Simulator;
    private javax.swing.JTable table_Teams;
    private javax.swing.JButton view_SimButton;
    // End of variables declaration//GEN-END:variables

    public void addScoreToTeam(int number, String name, int score) 
    {
        // Method will check to see if the team exists or not.
        // If team exists, will add the score to the teams scores TreeSet
        // If it does not exist, will create a Team object, add scores
        // and add team to the teams TreeMap.

        Team team;

        if (teams.containsKey(number)) 
        {
            team = teams.get(number);
        } 
        else 
        {
            team = new Team(name, number, new ArrayList<Integer>());
        }

        // Adds score to teams TreeSet
        team.getScores().add(score);
        
        teams.put(number, team);
    }

    public void updateTeamStatsTable()
    {
        // Methods will update the Teams Stats in the TeamsStatsTable
        // based on changes to the teams TreeMap
        DefaultTableModel model = (DefaultTableModel) table_Teams.getModel();
        model.setRowCount(0);
        
        DefaultTableModel model2 = (DefaultTableModel) table_Simulator.getModel();

        for (Integer key : teams.keySet()) 
        {
            Object[] data = new Object[5];
            data[0] = teams.get(key).getNumber();
            data[1] = teams.get(key).getName();
            data[2] = oprs.get(key);
            data[3] = ScoreMaker.getAverage(teams.get(key).getScores());
            data[4] = teams.get(key).getScores();
            
            model.addRow(data);
        }
    }

    // Prints all matches from the match table
    // Prints all matches from the match table
    public void displayMatchesInTable()
    {
        DefaultTableModel model = (DefaultTableModel) table_Matches.getModel();
        model.setRowCount(0);
        
        for (Match m : matches)
        {
            Object[] data = new Object[5];
            
            // Add an asterisk for surrogate teams
            String red1 = (m.getSurrogates()[0]) ? "* " + m.getRed1() : "" + m.getRed1();
            String red2 = (m.getSurrogates()[1]) ? "* " + m.getRed2() : "" + m.getRed2();
            String blue1 = (m.getSurrogates()[2]) ? "* " + m.getBlue1() : "" + m.getBlue1();
            String blue2 = (m.getSurrogates()[3]) ? "* " + m.getBlue2() : "" + m.getBlue2();
            
            String redAlliance = String.format("%7s%4s%7s", red1, "", red2);
            String blueAlliance = String.format("%7s%4s%7s", blue1, "", blue2);
            
            data[0] = m.getName();
            data[1] = m.getRedScore();
            data[2] = redAlliance;
            data[3] = m.getBlueScore();
            data[4] = blueAlliance;
            
            model.addRow(data);
        }
    }

    public double getOPRFromTable(int teamNum)
    {
        
        DefaultTableModel model = (DefaultTableModel) table_Teams.getModel();
       
        for(int i = 0; i < model.getRowCount(); i++)
        {
            if (teamNum == (Integer)(model.getValueAt(i, 0)))
            {
                return (Double) model.getValueAt(i,2);
            }
        }
        
        return 0;
    }

    public void scoreMatches()
    {
        /* The scoreMatches method will itereate through the matches TreeSet
        and score each individual match. To do this, use the ScoreMaker class to 
        get a score for red1, red2, blue1, and blue2. Then, add red1 and red2 to
        set the RedScore, and add blue1 and blue2 to set the blueScore.
        * Determines which team wins the match
        * Adds the loser's score to the tbp instance variable of all 4 teams.
        * Adds points to rp instance variable based on the following criteria
           * Win - add 2 points
           * Tie - add 1 point
           * Loss - add 0 points
           * Do not add any points for rp or tbh for a surrogate team.
        After all matches are scored, iterate through the teams TreeMap and add
        all the teams to the rankedTeams TreeSet<Team>.
        */
        clearResultsFromTeams();
        
        rankedTeams = new TreeSet<Team>(new RankingComparator());
        
        for (Match m : matches)
        {
            Team red1 = teams.get(m.getRed1());
            Team red2 = teams.get(m.getRed2());
            Team blue1 = teams.get(m.getBlue1());
            Team blue2 = teams.get(m.getBlue2());
            
            double red1OPR = getOPRFromTable(red1.getNumber());
            double red2OPR = getOPRFromTable(red2.getNumber());
            double blue1OPR = getOPRFromTable(blue1.getNumber());
            double blue2OPR = getOPRFromTable(blue2.getNumber());
            
            double red1STD = ScoreMaker.getSTD(red1.getScores());
            double red2STD = ScoreMaker.getSTD(red2.getScores());
            double blue1STD = ScoreMaker.getSTD(blue1.getScores());
            double blue2STD = ScoreMaker.getSTD(blue2.getScores());
            
            int red1Score = ScoreMaker.getScore(red1OPR, red1STD); 
            int red2Score = ScoreMaker.getScore(red2OPR, red2STD); 
            int blue1Score = ScoreMaker.getScore(blue1OPR, blue1STD); 
            int blue2Score = ScoreMaker.getScore(blue2OPR, blue2STD); 
            
            int redScore = red1Score + red2Score;
            int blueScore = blue1Score + blue2Score;
                     
            m.setBlueScore(blueScore);
            m.setRedScore(redScore);
            
            int matchNum = Integer.parseInt(m.getName().substring(m.getName().indexOf(" ") +1));
                           
            if (redScore > blueScore)
            {
                if (!m.getSurrogates()[0])
                {
                    red1.setRp(red1.getRp() + 2);
                    red1.setTbp(red1.getTbp() + blueScore);
                    red1.addScores_Simulated(redScore);
                    red1.addMatch_Number(matchNum);
                }
                if (!m.getSurrogates()[1])
                {
                    red2.setRp(red2.getRp() + 2);
                    red2.setTbp(red2.getTbp() + blueScore);
                    red2.addScores_Simulated(redScore);
                    red2.addMatch_Number(matchNum);
                }
                if (!m.getSurrogates()[2])
                {
                    blue1.setTbp(blue1.getTbp() + blueScore);
                    blue1.addScores_Simulated(blueScore);
                    blue1.addMatch_Number(matchNum);
                }
                if (!m.getSurrogates()[3])
                {
                    blue2.setTbp(blue1.getTbp() + blueScore);
                    blue2.addScores_Simulated(blueScore);
                    blue2.addMatch_Number(matchNum);
                }  
            }
            else if (redScore < blueScore)
            {
                if (!m.getSurrogates()[0])
                {
                    red1.setTbp(red1.getTbp() + redScore);
                    red1.addScores_Simulated(redScore);
                    red1.addMatch_Number(matchNum);
                }
                if (!m.getSurrogates()[1])
                {
                    red2.setTbp(red2.getTbp() + redScore);
                    red2.addScores_Simulated(redScore);
                    red2.addMatch_Number(matchNum);
                }
                if (!m.getSurrogates()[2])
                {
                    blue1.setRp(blue1.getRp() + 2);
                    blue1.setTbp(blue1.getTbp() + redScore);
                    blue1.addScores_Simulated(blueScore);
                    blue1.addMatch_Number(matchNum);
                }
                
                if (!m.getSurrogates()[3])
                {
                    blue2.setRp(blue2.getRp() + 2);
                    blue2.setTbp(blue2.getTbp() + redScore);
                    blue2.addScores_Simulated(blueScore);
                    blue2.addMatch_Number(matchNum);
                } 
            }
            else
            {
                if (!m.getSurrogates()[0])
                {
                    red1.setRp(red1.getRp() + 1);
                    red1.setTbp(red1.getTbp() + redScore);
                    red1.addScores_Simulated(redScore);
                    red1.addMatch_Number(matchNum);
                }
                if (!m.getSurrogates()[1])
                {
                    red2.setRp(red2.getRp() + 1);
                    red2.setTbp(red2.getTbp() + redScore);
                    red2.addScores_Simulated(redScore);
                    red2.addMatch_Number(matchNum);
                }
                if (!m.getSurrogates()[2])
                {
                    blue1.setRp(blue1.getRp() + 1);
                    blue1.setTbp(blue1.getTbp() + redScore);
                    blue1.addScores_Simulated(blueScore);
                    blue1.addMatch_Number(matchNum);
                }
                if (!m.getSurrogates()[3])
                {
                    blue2.setRp(blue2.getRp() + 1);
                    blue2.setTbp(blue2.getTbp() + redScore);
                    blue2.addScores_Simulated(blueScore);
                    blue2.addMatch_Number(matchNum);
                }
            }
 
//            teams.put(red1.getNumber(), red1);
//            teams.put(red2.getNumber(), red2);
//            teams.put(blue1.getNumber(), blue1);
//            teams.put(blue2.getNumber(), blue2);
        }
        
        for (Integer key : teams.keySet()) 
        {
            Double tbp = teams.get(key).getTbp();
            Double rp = teams.get(key).getRp();
            String name = teams.get(key).getName();
            int number = teams.get(key).getNumber();
            ArrayList<Integer> scores_simulated = teams.get(key).getScores_simulated();
            TreeSet<Integer> matchNumbers = teams.get(key).getMatchNumbers();
            ArrayList<Integer> scores = teams.get(key).getScores();
            Double opr = teams.get(key).getOPR();
            
            Team t = new Team();
            
            t.setName(name);
            t.setNumber(number);
            t.setTbp(tbp);
            t.setRp(rp);
            t.setScores_simulated(scores_simulated);
            t.setMatchNumbers(matchNumbers);
            t.setScores(scores);
            
            rankedTeams.add(t);
        }
        
    }

    public void displayResultsInTable()
    {
        DefaultTableModel model = (DefaultTableModel) table_Simulator.getModel();
         
        while (model.getRowCount() > 0)
        {
            model.removeRow(0);
        }
        
        int rank = 1;
        for (Team t : rankedTeams)
        {
            Object[] data = new Object[9];
            
            data[0] = rank;
            data[1] = t.getNumber();
        //    data[2] = getOPRFromTable(t.getNumber());
            data[2] = t.getOPR();
            data[3] = t.getTbp();
            data[4] = t.getRp();
            data[5] = ScoreMaker.getSTD(t.getScores_simulated());

            model.addRow(data);
            
            rank++; 
        }
       
    }     

    private void loadMatches(Scanner data)
    {       
        matches = readMatches(data);
        
        displayMatchesInTable();

    }

    private void loadOPR(Scanner file)
    {
        oprs = new TreeMap();
        while (file.hasNext())
        {
            oprs.put(file.nextInt(), file.nextDouble());
        }
    }

    private void loadFullData(Scanner file)
    {
        teams = new TreeMap<>();

        while (file.hasNextLine()) {
                
                Scanner line = new Scanner(file.nextLine());
                line.useDelimiter(",");
                
                line.next();    // Meet
                line.next();    // Round Name
                line.next();    // League
                
                int redScore = line.nextInt();
                int blueScore = line.nextInt();
                
                int red1 = line.nextInt();
                String red1Name = line.next();
                
                int red2 = line.nextInt();
                String red2Name = line.next();               

                int blue1 = line.nextInt();
                String blue1Name = line.next();
                
                int blue2 = line.nextInt();
                String blue2Name = line.next(); 
                
                addScoreToTeam(red1, red1Name, redScore);
                addScoreToTeam(red2, red2Name, redScore);
                addScoreToTeam(blue1, blue1Name, blueScore);
                addScoreToTeam(blue2, blue2Name, blueScore);                
   
            }
        updateTeamStatsTable();
        initSimulatorTable();
    }

    private void initSimulatorTable()
    {
        DefaultTableModel model= (DefaultTableModel)table_Simulator.getModel();
        model.setRowCount(0);
        
        for(Integer key : teams.keySet())
        {
            Team team = teams.get(key);
            Object[] data = new Object[5];
            
            data[1] = team.getNumber();
            data[2] = oprs.get(key);
            
            model.addRow(data);
        }
    }  

    private void writeModelToFile (File file)
    {    
        FileOutputStream fos;
       
        try
        {
            fos = new FileOutputStream(file);
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(new SimModel(teams, matches, oprs, rankedTeams));
            oos.writeObject(simulations);
            currentFile = file;
            oos.close();
        } 
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearResultsFromTeams()
    {
        for (Integer key : teams.keySet())
        {
            Team t = teams.get(key);
            t.setTbp(0.0);
            t.setRp(0.0);
            t.setScores_simulated(new ArrayList<>());
        }
    }
    
    private TreeSet<Match> readMatches(Scanner data) 
    {
        //TreeSet<Match> 
        matches = new TreeSet<>();
        while(data.hasNextLine() && data.hasNextInt())
        {
            boolean surrogates[] = {false, false, false, false};
            
            Scanner file = new Scanner(data.nextLine());
            String matchNum = file.next();
            int r1Num = file.nextInt();
            int r1 = file.nextInt();
            int r2Num = file.nextInt();
            int r2 = file.nextInt();
            int b1Num = file.nextInt();
            int b1 = file.nextInt();
            int b2Num = file.nextInt();
            int b2 = file.nextInt();
               
            // Checks if the team is a surrogate
            // If so, it changes the surrogate boolean to true
            surrogates[0] = (r1 == 1);
            
            if (r2 == 1)
            {
                surrogates[1] = true;
            }
               
            if (b1 == 1)
            {
                surrogates[2] = true;
            }
               
            if (b2 == 1)
            {
                surrogates[3] = true;
            }
               
               // Creates a new Match object and adds it to the matches list
            matches.add(new Match(matchNum, r1Num, r2Num, b1Num, b2Num, surrogates));
        }
        
        System.out.println("Loaded # matches " + matches.size());  
        
        return matches;
        
    }
    
    public static class RankingComparator implements Comparator<Team>, Serializable
     {
        @Override
        public int compare(Team o1, Team o2) {
            if (o1.getOPR() < o2.getOPR()) return 1;
            else if (o1.getOPR() > o2.getOPR()) return -1;
            
            else if (ScoreMaker.getSTD(o1.getScores_simulated()) > ScoreMaker.getSTD(o2.getScores_simulated())) return 1;
            else if (ScoreMaker.getSTD(o1.getScores_simulated()) < ScoreMaker.getSTD(o2.getScores_simulated())) return -1;
            
            else if (o1.getRp() < o2.getRp()) return 1;
            else if (o1.getRp() > o2.getRp()) return -1;

            else if (o1.getTbp() < o2.getTbp()) return 1;
            else if (o1.getTbp() > o2.getTbp()) return -1;
            
            else if(o1.getNumber() > o2.getNumber()) return 1;
            else if(o1.getNumber() < o2.getNumber()) return -1;
            
            else return 0;
        }
         
     }    

}